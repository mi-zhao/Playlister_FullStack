{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { createContext, useState } from 'react';\nimport jsTPS from '../common/jsTPS';\nimport api from '../api';\nexport const GlobalStoreContext = /*#__PURE__*/createContext({});\n/*\n    This is our global data store. Note that it uses the Flux design pattern,\n    which makes use of things like actions and reducers. \n    \n    @author McKilla Gorilla\n*/\n// THESE ARE ALL THE TYPES OF UPDATES TO OUR GLOBAL\n// DATA STORE STATE THAT CAN BE PROCESSED\n\nexport const GlobalStoreActionType = {\n  CHANGE_LIST_NAME: \"CHANGE_LIST_NAME\",\n  CLOSE_CURRENT_LIST: \"CLOSE_CURRENT_LIST\",\n  CREATE_NEW_LIST: \"CREATE_NEW_LIST\",\n  LOAD_ID_NAME_PAIRS: \"LOAD_ID_NAME_PAIRS\",\n  SET_CURRENT_LIST: \"SET_CURRENT_LIST\",\n  SET_LIST_NAME_EDIT_ACTIVE: \"SET_LIST_NAME_EDIT_ACTIVE\",\n  MARK_LIST_FOR_DELETION: \"MARK_LIST_FOR_DELETION\"\n}; // WE'LL NEED THIS TO PROCESS TRANSACTIONS\n\nconst tps = new jsTPS(); // WITH THIS WE'RE MAKING OUR GLOBAL DATA STORE\n// AVAILABLE TO THE REST OF THE APPLICATION\n\nexport const useGlobalStore = () => {\n  _s();\n\n  // THESE ARE ALL THE THINGS OUR DATA STORE WILL MANAGE\n  const [store, setStore] = useState({\n    idNamePairs: [],\n    currentList: null,\n    newListCounter: 0,\n    listNameActive: false,\n    idToDelete: 0\n  }); // HERE'S THE DATA STORE'S REDUCER, IT MUST\n  // HANDLE EVERY TYPE OF STATE CHANGE\n\n  const storeReducer = action => {\n    const {\n      type,\n      payload\n    } = action;\n\n    switch (type) {\n      // LIST UPDATE OF ITS NAME\n      case GlobalStoreActionType.CHANGE_LIST_NAME:\n        {\n          return setStore({\n            idNamePairs: payload.idNamePairs,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            idToDelete: store.idToDelete\n          });\n        }\n      // STOP EDITING THE CURRENT LIST\n\n      case GlobalStoreActionType.CLOSE_CURRENT_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            idToDelete: store.idToDelete\n          });\n        }\n      // CREATE A NEW LIST\n\n      case GlobalStoreActionType.CREATE_NEW_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            newListCounter: store.newListCounter + 1,\n            listNameActive: false,\n            idToDelete: store.idToDelete\n          });\n        }\n      // GET ALL THE LISTS SO WE CAN PRESENT THEM\n\n      case GlobalStoreActionType.LOAD_ID_NAME_PAIRS:\n        {\n          return setStore({\n            idNamePairs: payload,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            idToDelete: store.idToDelete\n          });\n        }\n      // PREPARE TO DELETE A LIST\n\n      case GlobalStoreActionType.MARK_LIST_FOR_DELETION:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            idToDelete: id\n          });\n        }\n      // UPDATE A LIST\n\n      case GlobalStoreActionType.SET_CURRENT_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            idToDelete: store.idToDelete\n          });\n        }\n      // START EDITING A LIST NAME\n\n      case GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            newListCounter: store.newListCounter,\n            listNameActive: true,\n            idToDelete: store.idToDelete\n          });\n        }\n\n      default:\n        return store;\n    }\n  }; // THESE ARE THE FUNCTIONS THAT WILL UPDATE OUR STORE AND\n  // DRIVE THE STATE OF THE APPLICATION. WE'LL CALL THESE IN \n  // RESPONSE TO EVENTS INSIDE OUR COMPONENTS.\n\n\n  store.createNewList = function () {\n    async function asyncCreateNewList() {\n      let newlist = {\n        name: \"Untitled\",\n        songs: []\n      };\n      let response = await api.createPlaylist(newlist);\n\n      if (response.data.success) {\n        let playlist = response.data.playlist;\n        storeReducer({\n          type: GlobalStoreActionType.CREATE_NEW_LIST,\n          payload: playlist\n        }); // Edit mode right after list is made:\n\n        store.history.push(\"/playlist/\" + playlist._id); // Changes browser/client URL (Ex. history.push(‘/‘) changes to https://localhost:3000/)\n      }\n    }\n\n    asyncCreateNewList();\n  }; // THIS FUNCTION PROCESSES CHANGING A LIST NAME\n\n\n  store.changeListName = function (id, newName) {\n    // GET THE LIST\n    async function asyncChangeListName(id) {\n      let response = await api.getPlaylistById(id);\n\n      if (response.data.success) {\n        let playlist = response.data.playlist;\n        playlist.name = newName;\n        console.log(response.data.idNamePairs); // see if this changed:\n\n        async function updateList(playlist) {\n          response = await api.updatePlaylistById(playlist._id, playlist);\n\n          if (response.data.success) {\n            console.log(response.data);\n\n            async function getListPairs(playlist) {\n              response = await api.getPlaylistPairs();\n\n              if (response.data.success) {\n                let pairsArray = response.data.idNamePairs;\n                storeReducer({\n                  type: GlobalStoreActionType.CHANGE_LIST_NAME,\n                  payload: {\n                    idNamePairs: pairsArray,\n                    playlist: playlist\n                  }\n                });\n              }\n            }\n\n            getListPairs(playlist);\n          }\n        }\n\n        updateList(playlist);\n      }\n    }\n\n    asyncChangeListName(id);\n  };\n\n  store.setMarkedSong = function (id) {\n    storeReducer({\n      type: GlobalStoreActionType.MARK_LIST_FOR_DELETION,\n      payload: id\n    });\n    store.enableDeleteListModal();\n  };\n\n  store.callDeleteList = function () {\n    store.deleteList(store.idToDelete);\n  };\n\n  store.deleteList = function (idNamePair) {\n    const id = idNamePair._id;\n\n    async function asyncDeleteList(id) {\n      let response = await api.deletePlaylistById(id);\n\n      if (response.data.success) {\n        store.loadIdNamePairs(); // Refresh playlist\n\n        store.history.push(\"/\");\n      }\n    }\n\n    asyncDeleteList(id);\n  };\n\n  store.enableDeleteListModal = function () {\n    document.getElementById(\"delete-list-modal\").classList.add(\"is-visible\");\n  };\n\n  store.hideDeleteListModal = function () {\n    document.getElementById(\"delete-list-modal\").classList.remove(\"is-visible\");\n  }; // THIS FUNCTION PROCESSES CLOSING THE CURRENTLY LOADED LIST\n\n\n  store.closeCurrentList = function () {\n    storeReducer({\n      type: GlobalStoreActionType.CLOSE_CURRENT_LIST,\n      payload: {}\n    });\n  }; // THIS FUNCTION LOADS ALL THE ID, NAME PAIRS SO WE CAN LIST ALL THE LISTS\n\n\n  store.loadIdNamePairs = function () {\n    async function asyncLoadIdNamePairs() {\n      const response = await api.getPlaylistPairs();\n\n      if (response.data.success) {\n        let pairsArray = response.data.idNamePairs;\n        storeReducer({\n          type: GlobalStoreActionType.LOAD_ID_NAME_PAIRS,\n          payload: pairsArray\n        });\n      } else {\n        console.log(\"API FAILED TO GET THE LIST PAIRS\");\n      }\n    }\n\n    asyncLoadIdNamePairs();\n  };\n\n  store.setCurrentList = function (id) {\n    async function asyncSetCurrentList(id) {\n      let response = await api.getPlaylistById(id);\n\n      if (response.data.success) {\n        let playlist = response.data.playlist;\n\n        if (response.data.success) {\n          storeReducer({\n            type: GlobalStoreActionType.SET_CURRENT_LIST,\n            payload: playlist\n          });\n          store.history.push(\"/playlist/\" + playlist._id);\n        }\n      }\n    }\n\n    asyncSetCurrentList(id);\n  };\n\n  store.getPlaylistSize = function () {\n    return store.currentList.songs.length;\n  };\n\n  store.undo = function () {\n    console.log(store);\n    tps.undoTransaction();\n  };\n\n  store.redo = function () {\n    tps.doTransaction();\n  }; // THIS FUNCTION ENABLES THE PROCESS OF EDITING A LIST NAME\n\n\n  store.setIsListNameEditActive = function () {\n    storeReducer({\n      type: GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE,\n      payload: null\n    });\n  }; // THIS GIVES OUR STORE AND ITS REDUCER TO ANY COMPONENT THAT NEEDS IT\n\n\n  return {\n    store,\n    storeReducer\n  };\n};\n\n_s(useGlobalStore, \"KoqQBmL8cPp8iCyDXs8kGuZFFO8=\");","map":{"version":3,"names":["createContext","useState","jsTPS","api","GlobalStoreContext","GlobalStoreActionType","CHANGE_LIST_NAME","CLOSE_CURRENT_LIST","CREATE_NEW_LIST","LOAD_ID_NAME_PAIRS","SET_CURRENT_LIST","SET_LIST_NAME_EDIT_ACTIVE","MARK_LIST_FOR_DELETION","tps","useGlobalStore","store","setStore","idNamePairs","currentList","newListCounter","listNameActive","idToDelete","storeReducer","action","type","payload","id","createNewList","asyncCreateNewList","newlist","name","songs","response","createPlaylist","data","success","playlist","history","push","_id","changeListName","newName","asyncChangeListName","getPlaylistById","console","log","updateList","updatePlaylistById","getListPairs","getPlaylistPairs","pairsArray","setMarkedSong","enableDeleteListModal","callDeleteList","deleteList","idNamePair","asyncDeleteList","deletePlaylistById","loadIdNamePairs","document","getElementById","classList","add","hideDeleteListModal","remove","closeCurrentList","asyncLoadIdNamePairs","setCurrentList","asyncSetCurrentList","getPlaylistSize","length","undo","undoTransaction","redo","doTransaction","setIsListNameEditActive"],"sources":["/Users/michelle/Projects/Playlister_HW3/client/src/store/index.js"],"sourcesContent":["import { createContext, useState } from 'react'\nimport jsTPS from '../common/jsTPS'\nimport api from '../api'\nexport const GlobalStoreContext = createContext({});\n/*\n    This is our global data store. Note that it uses the Flux design pattern,\n    which makes use of things like actions and reducers. \n    \n    @author McKilla Gorilla\n*/\n\n// THESE ARE ALL THE TYPES OF UPDATES TO OUR GLOBAL\n// DATA STORE STATE THAT CAN BE PROCESSED\nexport const GlobalStoreActionType = {\n    CHANGE_LIST_NAME: \"CHANGE_LIST_NAME\",\n    CLOSE_CURRENT_LIST: \"CLOSE_CURRENT_LIST\",\n    CREATE_NEW_LIST: \"CREATE_NEW_LIST\",\n    LOAD_ID_NAME_PAIRS: \"LOAD_ID_NAME_PAIRS\",\n    SET_CURRENT_LIST: \"SET_CURRENT_LIST\",\n    SET_LIST_NAME_EDIT_ACTIVE: \"SET_LIST_NAME_EDIT_ACTIVE\",\n    MARK_LIST_FOR_DELETION: \"MARK_LIST_FOR_DELETION\",\n}\n\n// WE'LL NEED THIS TO PROCESS TRANSACTIONS\nconst tps = new jsTPS();\n\n// WITH THIS WE'RE MAKING OUR GLOBAL DATA STORE\n// AVAILABLE TO THE REST OF THE APPLICATION\nexport const useGlobalStore = () => {\n    // THESE ARE ALL THE THINGS OUR DATA STORE WILL MANAGE\n    const [store, setStore] = useState({\n        idNamePairs: [],\n        currentList: null,\n        newListCounter: 0,\n        listNameActive: false,\n        idToDelete: 0\n    });\n\n    // HERE'S THE DATA STORE'S REDUCER, IT MUST\n    // HANDLE EVERY TYPE OF STATE CHANGE\n    const storeReducer = (action) => {\n        const { type, payload } = action;\n        switch (type) {\n            // LIST UPDATE OF ITS NAME\n            case GlobalStoreActionType.CHANGE_LIST_NAME: {\n                return setStore({\n                    idNamePairs: payload.idNamePairs,\n                    currentList: null,\n                    newListCounter: store.newListCounter,\n                    listNameActive: false,\n                    idToDelete: store.idToDelete\n                });\n            }\n            // STOP EDITING THE CURRENT LIST\n            case GlobalStoreActionType.CLOSE_CURRENT_LIST: {\n                return setStore({\n                    idNamePairs: store.idNamePairs, \n                    currentList: null,\n                    newListCounter: store.newListCounter,\n                    listNameActive: false,\n                    idToDelete: store.idToDelete\n                })\n            }\n            // CREATE A NEW LIST\n            case GlobalStoreActionType.CREATE_NEW_LIST: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: payload,\n                    newListCounter: store.newListCounter + 1,\n                    listNameActive: false,\n                    idToDelete: store.idToDelete\n                })\n            }\n            // GET ALL THE LISTS SO WE CAN PRESENT THEM\n            case GlobalStoreActionType.LOAD_ID_NAME_PAIRS: {\n                return setStore({\n                    idNamePairs: payload,\n                    currentList: null,\n                    newListCounter: store.newListCounter,\n                    listNameActive: false,\n                    idToDelete: store.idToDelete\n                });\n            }\n            // PREPARE TO DELETE A LIST\n            case GlobalStoreActionType.MARK_LIST_FOR_DELETION: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: null,\n                    newListCounter: store.newListCounter,\n                    listNameActive: false,\n                    idToDelete: id\n                });\n            }\n            // UPDATE A LIST\n            case GlobalStoreActionType.SET_CURRENT_LIST: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: payload,\n                    newListCounter: store.newListCounter,\n                    listNameActive: false,\n                    idToDelete: store.idToDelete\n                });\n            }\n            // START EDITING A LIST NAME\n            case GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: payload,\n                    newListCounter: store.newListCounter,\n                    listNameActive: true,\n                    idToDelete: store.idToDelete\n                });\n            }\n            default:\n                return store;\n        }\n    }\n    // THESE ARE THE FUNCTIONS THAT WILL UPDATE OUR STORE AND\n    // DRIVE THE STATE OF THE APPLICATION. WE'LL CALL THESE IN \n    // RESPONSE TO EVENTS INSIDE OUR COMPONENTS.\n\n    store.createNewList = function () {\n        async function asyncCreateNewList() {\n            let newlist = {\n                name: \"Untitled\",\n                songs: []\n            }\n            let response = await api.createPlaylist(newlist);\n            if (response.data.success) {\n                let playlist = response.data.playlist;\n                storeReducer({\n                    type: GlobalStoreActionType.CREATE_NEW_LIST,\n                    payload: playlist\n                });\n                // Edit mode right after list is made:\n                store.history.push(\"/playlist/\" + playlist._id) // Changes browser/client URL (Ex. history.push(‘/‘) changes to https://localhost:3000/)\n            }\n        }\n        asyncCreateNewList();\n    }\n\n    // THIS FUNCTION PROCESSES CHANGING A LIST NAME\n    store.changeListName = function (id, newName) {\n        // GET THE LIST\n        async function asyncChangeListName(id) {\n            let response = await api.getPlaylistById(id);\n            if (response.data.success) {\n                let playlist = response.data.playlist;\n                playlist.name = newName;\n                console.log(response.data.idNamePairs)  // see if this changed:\n                async function updateList(playlist) {\n                    response = await api.updatePlaylistById(playlist._id, playlist);\n                    if (response.data.success) {\n                        console.log(response.data)\n                        async function getListPairs(playlist) {\n                            response = await api.getPlaylistPairs();\n                            if (response.data.success) {\n                                let pairsArray = response.data.idNamePairs;\n                                storeReducer({\n                                    type: GlobalStoreActionType.CHANGE_LIST_NAME,\n                                    payload: {\n                                        idNamePairs: pairsArray,\n                                        playlist: playlist\n                                    }\n                                });\n                            }\n                        }\n                        getListPairs(playlist);\n                    }\n                }\n                updateList(playlist);\n            }\n        }\n        asyncChangeListName(id);\n    }\n\n    store.setMarkedSong = function (id) {\n        storeReducer({\n            type: GlobalStoreActionType.MARK_LIST_FOR_DELETION,\n            payload: id\n        })\n        store.enableDeleteListModal();\n    }\n    store.callDeleteList = function () {\n        store.deleteList(store.idToDelete);\n    }\n    store.deleteList = function (idNamePair) {\n        const id = idNamePair._id;\n        async function asyncDeleteList(id) {\n            let response = await api.deletePlaylistById(id)\n            if (response.data.success) {\n                store.loadIdNamePairs();    // Refresh playlist\n                store.history.push(\"/\")\n            }\n        }\n        asyncDeleteList(id);\n    }\n\n    store.enableDeleteListModal = function () {\n        document.getElementById(\"delete-list-modal\").classList.add(\"is-visible\");\n    }\n\n    store.hideDeleteListModal = function () {\n        document.getElementById(\"delete-list-modal\").classList.remove(\"is-visible\");\n    }\n\n    // THIS FUNCTION PROCESSES CLOSING THE CURRENTLY LOADED LIST\n    store.closeCurrentList = function () {\n        storeReducer({\n            type: GlobalStoreActionType.CLOSE_CURRENT_LIST,\n            payload: {}\n        });\n    }\n\n    // THIS FUNCTION LOADS ALL THE ID, NAME PAIRS SO WE CAN LIST ALL THE LISTS\n    store.loadIdNamePairs = function () {\n        async function asyncLoadIdNamePairs() {\n            const response = await api.getPlaylistPairs();\n            if (response.data.success) {\n                let pairsArray = response.data.idNamePairs;\n                storeReducer({\n                    type: GlobalStoreActionType.LOAD_ID_NAME_PAIRS,\n                    payload: pairsArray\n                });\n            }\n            else {\n                console.log(\"API FAILED TO GET THE LIST PAIRS\");\n            }\n        }\n        asyncLoadIdNamePairs();\n    }\n\n    store.setCurrentList = function (id) {\n        async function asyncSetCurrentList(id) {\n            let response = await api.getPlaylistById(id);\n            if (response.data.success) {\n                let playlist = response.data.playlist;\n\n                if (response.data.success) {\n                    storeReducer({\n                        type: GlobalStoreActionType.SET_CURRENT_LIST,\n                        payload: playlist\n                    });\n                    store.history.push(\"/playlist/\" + playlist._id);\n                }\n            }\n        }\n        asyncSetCurrentList(id);\n    }\n    store.getPlaylistSize = function() {\n        return store.currentList.songs.length;\n    }\n    store.undo = function () {\n        console.log(store);\n        tps.undoTransaction();\n    }\n    store.redo = function () {\n        tps.doTransaction();\n    }\n\n    // THIS FUNCTION ENABLES THE PROCESS OF EDITING A LIST NAME\n    store.setIsListNameEditActive = function () {\n        storeReducer({\n            type: GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE,\n            payload: null\n        });\n    }\n\n    // THIS GIVES OUR STORE AND ITS REDUCER TO ANY COMPONENT THAT NEEDS IT\n    return { store, storeReducer };\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}