{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { createContext, useState } from 'react';\nimport jsTPS from '../common/jsTPS';\nimport api from '../api';\nexport const GlobalStoreContext = /*#__PURE__*/createContext({});\n/*\n    This is our global data store. Note that it uses the Flux design pattern,\n    which makes use of things like actions and reducers. \n    \n    @author McKilla Gorilla\n*/\n// THESE ARE ALL THE TYPES OF UPDATES TO OUR GLOBAL\n// DATA STORE STATE THAT CAN BE PROCESSED\n\nexport const GlobalStoreActionType = {\n  CHANGE_LIST_NAME: \"CHANGE_LIST_NAME\",\n  CLOSE_CURRENT_LIST: \"CLOSE_CURRENT_LIST\",\n  CREATE_NEW_LIST: \"CREATE_NEW_LIST\",\n  LOAD_ID_NAME_PAIRS: \"LOAD_ID_NAME_PAIRS\",\n  SET_CURRENT_LIST: \"SET_CURRENT_LIST\",\n  SET_LIST_NAME_EDIT_ACTIVE: \"SET_LIST_NAME_EDIT_ACTIVE\",\n  MARK_LIST_FOR_DELETION: \"MARK_LIST_FOR_DELETION\",\n  SET_EDIT_SONG_ACTIVE: \"SET_EDIT_SONG_ACTIVE\"\n}; // WE'LL NEED THIS TO PROCESS TRANSACTIONS\n\nconst tps = new jsTPS(); // WITH THIS WE'RE MAKING OUR GLOBAL DATA STORE\n// AVAILABLE TO THE REST OF THE APPLICATION\n\nexport const useGlobalStore = () => {\n  _s();\n\n  // THESE ARE ALL THE THINGS OUR DATA STORE WILL MANAGE\n  const [store, setStore] = useState({\n    idNamePairs: [],\n    currentList: null,\n    newListCounter: 0,\n    listNameActive: false,\n    idToDelete: null,\n    playlistName: null,\n    currentSongIndex: null\n  }); // HERE'S THE DATA STORE'S REDUCER, IT MUST\n  // HANDLE EVERY TYPE OF STATE CHANGE\n\n  const storeReducer = action => {\n    const {\n      type,\n      payload\n    } = action;\n\n    switch (type) {\n      // LIST UPDATE OF ITS NAME\n      case GlobalStoreActionType.CHANGE_LIST_NAME:\n        {\n          return setStore({\n            idNamePairs: payload.idNamePairs,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            idToDelete: null,\n            playlistName: null,\n            currentSongIndex: null\n          });\n        }\n      // STOP EDITING THE CURRENT LIST\n\n      case GlobalStoreActionType.CLOSE_CURRENT_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            idToDelete: null,\n            playlistName: null,\n            currentSongIndex: null\n          });\n        }\n      // CREATE A NEW LIST\n\n      case GlobalStoreActionType.CREATE_NEW_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            newListCounter: store.newListCounter + 1,\n            listNameActive: false,\n            idToDelete: null,\n            playlistName: null,\n            currentSongIndex: null\n          });\n        }\n      // GET ALL THE LISTS SO WE CAN PRESENT THEM\n\n      case GlobalStoreActionType.LOAD_ID_NAME_PAIRS:\n        {\n          return setStore({\n            idNamePairs: payload,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            idToDelete: null,\n            playlistName: null,\n            currentSongIndex: null\n          });\n        }\n      // PREPARE TO DELETE A LIST\n\n      case GlobalStoreActionType.MARK_LIST_FOR_DELETION:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            idToDelete: payload._id,\n            playlistName: payload.name,\n            currentSongIndex: null\n          });\n        }\n      // UPDATE A LIST\n\n      case GlobalStoreActionType.SET_CURRENT_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            idToDelete: null,\n            playlistName: null,\n            currentSongIndex: null\n          });\n        }\n      // START EDITING A LIST NAME\n\n      case GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            newListCounter: store.newListCounter,\n            listNameActive: true,\n            idToDelete: null,\n            playlistName: null,\n            currentSongIndex: null\n          });\n        }\n\n      case GlobalStoreActionType.SET_EDIT_SONG_ACTIVE:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: store.currentList,\n            newListCounter: store.newListCounter,\n            listNameActive: store.listNameActive,\n            idToDelete: store.idToDelete,\n            playlistName: store.playlistName,\n            currentSongIndex: payload._id,\n            currentSongName: payload.title,\n            currentSongTitle: payload.name\n          });\n        }\n\n      default:\n        return store;\n    }\n  }; // THESE ARE THE FUNCTIONS THAT WILL UPDATE OUR STORE AND\n  // DRIVE THE STATE OF THE APPLICATION. WE'LL CALL THESE IN \n  // RESPONSE TO EVENTS INSIDE OUR COMPONENTS.\n\n\n  store.createNewList = function () {\n    async function asyncCreateNewList() {\n      let newlist = {\n        name: \"Untitled\",\n        songs: []\n      };\n      let response = await api.createPlaylist(newlist);\n\n      if (response.data.success) {\n        let playlist = response.data.playlist;\n        storeReducer({\n          type: GlobalStoreActionType.CREATE_NEW_LIST,\n          payload: playlist\n        }); // Edit mode right after list is made:\n\n        store.history.push(\"/playlist/\" + playlist._id); // Changes browser/client URL (Ex. history.push(‘/‘) changes to https://localhost:3000/)\n      }\n    }\n\n    asyncCreateNewList();\n  }; // THIS FUNCTION PROCESSES CHANGING A LIST NAME\n\n\n  store.changeListName = function (id, newName) {\n    // GET THE LIST\n    async function asyncChangeListName(id) {\n      let response = await api.getPlaylistById(id);\n\n      if (response.data.success) {\n        let playlist = response.data.playlist;\n        playlist.name = newName;\n        console.log(response.data.idNamePairs); // see if this changed:\n\n        async function updateList(playlist) {\n          response = await api.updatePlaylistById(playlist._id, playlist);\n\n          if (response.data.success) {\n            console.log(response.data);\n\n            async function getListPairs(playlist) {\n              response = await api.getPlaylistPairs();\n\n              if (response.data.success) {\n                let pairsArray = response.data.idNamePairs;\n                storeReducer({\n                  type: GlobalStoreActionType.CHANGE_LIST_NAME,\n                  payload: {\n                    idNamePairs: pairsArray,\n                    playlist: playlist\n                  }\n                });\n              }\n            }\n\n            getListPairs(playlist);\n          }\n        }\n\n        updateList(playlist);\n      }\n    }\n\n    asyncChangeListName(id);\n  };\n\n  store.setMarkedPlaylist = function (idNamePair) {\n    storeReducer({\n      type: GlobalStoreActionType.MARK_LIST_FOR_DELETION,\n      payload: idNamePair\n    });\n    store.enableDeleteListModal();\n  };\n\n  store.callDeleteList = function () {\n    store.hideDeleteListModal();\n    store.deleteList(store.idToDelete);\n  };\n\n  store.deleteList = function (id) {\n    async function asyncDeleteList(id) {\n      let response = await api.deletePlaylistById(id);\n\n      if (response.data.success) {\n        store.loadIdNamePairs(); // Refresh playlist\n\n        store.history.push(\"/\");\n      }\n    }\n\n    asyncDeleteList(id);\n  };\n\n  store.enableDeleteListModal = function () {\n    let modal = document.getElementById(\"delete-list-modal\");\n    modal.classList.add(\"is-visible\");\n  };\n\n  store.hideDeleteListModal = function () {\n    document.getElementById(\"delete-list-modal\").classList.remove(\"is-visible\");\n  }; // THIS FUNCTION PROCESSES CLOSING THE CURRENTLY LOADED LIST\n\n\n  store.closeCurrentList = function () {\n    storeReducer({\n      type: GlobalStoreActionType.CLOSE_CURRENT_LIST,\n      payload: {}\n    });\n  }; // THIS FUNCTION LOADS ALL THE ID, NAME PAIRS SO WE CAN LIST ALL THE LISTS\n\n\n  store.loadIdNamePairs = function () {\n    async function asyncLoadIdNamePairs() {\n      const response = await api.getPlaylistPairs();\n\n      if (response.data.success) {\n        let pairsArray = response.data.idNamePairs;\n        storeReducer({\n          type: GlobalStoreActionType.LOAD_ID_NAME_PAIRS,\n          payload: pairsArray\n        });\n      } else {\n        console.log(\"API FAILED TO GET THE LIST PAIRS\");\n      }\n    }\n\n    asyncLoadIdNamePairs();\n  };\n\n  store.setCurrentList = function (id) {\n    async function asyncSetCurrentList(id) {\n      let response = await api.getPlaylistById(id);\n\n      if (response.data.success) {\n        let playlist = response.data.playlist;\n\n        if (response.data.success) {\n          storeReducer({\n            type: GlobalStoreActionType.SET_CURRENT_LIST,\n            payload: playlist\n          });\n          store.history.push(\"/playlist/\" + playlist._id);\n        }\n      }\n    }\n\n    asyncSetCurrentList(id);\n  };\n\n  store.addSong = function () {\n    const playlist = store.currentList;\n    let song = {\n      artist: \"Untitled\",\n      title: \"Unknown\",\n      youTubeId: \"EpX1_YJPGAY\"\n    };\n    playlist.songs.push(song);\n\n    async function asyncAddSong() {\n      let response = await api.updatePlaylistById(store.currentList._id, playlist);\n\n      if (response.data.success) {\n        storeReducer({\n          type: GlobalStoreActionType.SET_CURRENT_LIST,\n          payload: store.currentList\n        });\n      }\n    }\n\n    asyncAddSong();\n  }; // store.deleteSong = function (index) {\n  // }\n\n\n  store.showDeleteSongModal = function (index) {\n    storeReducer({\n      type: GlobalStoreActionType.SET_EDIT_SONG_ACTIVE,\n      payload: song\n    });\n    document.getElementById(\"delete-song-modal\").classList.add(\"is-visible\");\n  };\n\n  store.hideDeleteSongModal = function () {\n    document.getElementById(\"delete-song-modal\").classList.remove(\"is-visible\");\n  };\n\n  store.getPlaylistSize = function () {\n    return store.currentList.songs.length;\n  };\n\n  store.undo = function () {\n    console.log(store);\n    tps.undoTransaction();\n  };\n\n  store.redo = function () {\n    tps.doTransaction();\n  }; // THIS FUNCTION ENABLES THE PROCESS OF EDITING A LIST NAME\n\n\n  store.setIsListNameEditActive = function () {\n    storeReducer({\n      type: GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE,\n      payload: null\n    });\n  }; // THIS GIVES OUR STORE AND ITS REDUCER TO ANY COMPONENT THAT NEEDS IT\n\n\n  return {\n    store,\n    storeReducer\n  };\n};\n\n_s(useGlobalStore, \"OaqvTbNW8yzKC/RghM8SYND67qE=\");","map":{"version":3,"names":["createContext","useState","jsTPS","api","GlobalStoreContext","GlobalStoreActionType","CHANGE_LIST_NAME","CLOSE_CURRENT_LIST","CREATE_NEW_LIST","LOAD_ID_NAME_PAIRS","SET_CURRENT_LIST","SET_LIST_NAME_EDIT_ACTIVE","MARK_LIST_FOR_DELETION","SET_EDIT_SONG_ACTIVE","tps","useGlobalStore","store","setStore","idNamePairs","currentList","newListCounter","listNameActive","idToDelete","playlistName","currentSongIndex","storeReducer","action","type","payload","_id","name","currentSongName","title","currentSongTitle","createNewList","asyncCreateNewList","newlist","songs","response","createPlaylist","data","success","playlist","history","push","changeListName","id","newName","asyncChangeListName","getPlaylistById","console","log","updateList","updatePlaylistById","getListPairs","getPlaylistPairs","pairsArray","setMarkedPlaylist","idNamePair","enableDeleteListModal","callDeleteList","hideDeleteListModal","deleteList","asyncDeleteList","deletePlaylistById","loadIdNamePairs","modal","document","getElementById","classList","add","remove","closeCurrentList","asyncLoadIdNamePairs","setCurrentList","asyncSetCurrentList","addSong","song","artist","youTubeId","asyncAddSong","showDeleteSongModal","index","hideDeleteSongModal","getPlaylistSize","length","undo","undoTransaction","redo","doTransaction","setIsListNameEditActive"],"sources":["/Users/michelle/Projects/Playlister_HW3/client/src/store/index.js"],"sourcesContent":["import { createContext, useState } from 'react'\nimport jsTPS from '../common/jsTPS'\nimport api from '../api'\nexport const GlobalStoreContext = createContext({});\n/*\n    This is our global data store. Note that it uses the Flux design pattern,\n    which makes use of things like actions and reducers. \n    \n    @author McKilla Gorilla\n*/\n\n// THESE ARE ALL THE TYPES OF UPDATES TO OUR GLOBAL\n// DATA STORE STATE THAT CAN BE PROCESSED\nexport const GlobalStoreActionType = {\n    CHANGE_LIST_NAME: \"CHANGE_LIST_NAME\",\n    CLOSE_CURRENT_LIST: \"CLOSE_CURRENT_LIST\",\n    CREATE_NEW_LIST: \"CREATE_NEW_LIST\",\n    LOAD_ID_NAME_PAIRS: \"LOAD_ID_NAME_PAIRS\",\n    SET_CURRENT_LIST: \"SET_CURRENT_LIST\",\n    SET_LIST_NAME_EDIT_ACTIVE: \"SET_LIST_NAME_EDIT_ACTIVE\",\n    MARK_LIST_FOR_DELETION: \"MARK_LIST_FOR_DELETION\",\n    SET_EDIT_SONG_ACTIVE: \"SET_EDIT_SONG_ACTIVE\"\n}\n\n// WE'LL NEED THIS TO PROCESS TRANSACTIONS\nconst tps = new jsTPS();\n\n// WITH THIS WE'RE MAKING OUR GLOBAL DATA STORE\n// AVAILABLE TO THE REST OF THE APPLICATION\nexport const useGlobalStore = () => {\n    // THESE ARE ALL THE THINGS OUR DATA STORE WILL MANAGE\n    const [store, setStore] = useState({\n        idNamePairs: [],\n        currentList: null,\n        newListCounter: 0,\n        listNameActive: false,\n        idToDelete: null,\n        playlistName: null,\n        currentSongIndex: null\n    });\n\n    // HERE'S THE DATA STORE'S REDUCER, IT MUST\n    // HANDLE EVERY TYPE OF STATE CHANGE\n    const storeReducer = (action) => {\n        const { type, payload } = action;\n        switch (type) {\n            // LIST UPDATE OF ITS NAME\n            case GlobalStoreActionType.CHANGE_LIST_NAME: {\n                return setStore({\n                    idNamePairs: payload.idNamePairs,\n                    currentList: null,\n                    newListCounter: store.newListCounter,\n                    listNameActive: false,\n                    idToDelete: null,\n                    playlistName: null,\n                    currentSongIndex: null\n                });\n            }\n            // STOP EDITING THE CURRENT LIST\n            case GlobalStoreActionType.CLOSE_CURRENT_LIST: {\n                return setStore({\n                    idNamePairs: store.idNamePairs, \n                    currentList: null,\n                    newListCounter: store.newListCounter,\n                    listNameActive: false,\n                    idToDelete: null,\n                    playlistName: null,\n                    currentSongIndex: null\n                })\n            }\n            // CREATE A NEW LIST\n            case GlobalStoreActionType.CREATE_NEW_LIST: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: payload,\n                    newListCounter: store.newListCounter + 1,\n                    listNameActive: false,\n                    idToDelete: null,\n                    playlistName: null,\n                    currentSongIndex: null\n                })\n            }\n            // GET ALL THE LISTS SO WE CAN PRESENT THEM\n            case GlobalStoreActionType.LOAD_ID_NAME_PAIRS: {\n                return setStore({\n                    idNamePairs: payload,\n                    currentList: null,\n                    newListCounter: store.newListCounter,\n                    listNameActive: false,\n                    idToDelete: null,\n                    playlistName: null,\n                    currentSongIndex: null\n                });\n            }\n            // PREPARE TO DELETE A LIST\n            case GlobalStoreActionType.MARK_LIST_FOR_DELETION: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: null,\n                    newListCounter: store.newListCounter,\n                    listNameActive: false,\n                    idToDelete: payload._id,\n                    playlistName: payload.name,\n                    currentSongIndex: null\n                });\n            }\n            // UPDATE A LIST\n            case GlobalStoreActionType.SET_CURRENT_LIST: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: payload,\n                    newListCounter: store.newListCounter,\n                    listNameActive: false,\n                    idToDelete: null,\n                    playlistName: null,\n                    currentSongIndex: null\n                });\n            }\n            // START EDITING A LIST NAME\n            case GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: payload,\n                    newListCounter: store.newListCounter,\n                    listNameActive: true,\n                    idToDelete: null,\n                    playlistName: null,\n                    currentSongIndex: null\n                });\n            }\n            case GlobalStoreActionType.SET_EDIT_SONG_ACTIVE: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: store.currentList,\n                    newListCounter: store.newListCounter,\n                    listNameActive: store.listNameActive,\n                    idToDelete: store.idToDelete,\n                    playlistName: store.playlistName,\n                    currentSongIndex: payload._id,\n                    currentSongName: payload.title,\n                    currentSongTitle: payload.name,\n                });\n            }\n            default:\n                return store;\n        }\n    }\n    // THESE ARE THE FUNCTIONS THAT WILL UPDATE OUR STORE AND\n    // DRIVE THE STATE OF THE APPLICATION. WE'LL CALL THESE IN \n    // RESPONSE TO EVENTS INSIDE OUR COMPONENTS.\n\n    store.createNewList = function () {\n        async function asyncCreateNewList() {\n            let newlist = {\n                name: \"Untitled\",\n                songs: []\n            }\n            let response = await api.createPlaylist(newlist);\n            if (response.data.success) {\n                let playlist = response.data.playlist;\n                storeReducer({\n                    type: GlobalStoreActionType.CREATE_NEW_LIST,\n                    payload: playlist\n                });\n                // Edit mode right after list is made:\n                store.history.push(\"/playlist/\" + playlist._id) // Changes browser/client URL (Ex. history.push(‘/‘) changes to https://localhost:3000/)\n            }\n        }\n        asyncCreateNewList();\n    }\n\n    // THIS FUNCTION PROCESSES CHANGING A LIST NAME\n    store.changeListName = function (id, newName) {\n        // GET THE LIST\n        async function asyncChangeListName(id) {\n            let response = await api.getPlaylistById(id);\n            if (response.data.success) {\n                let playlist = response.data.playlist;\n                playlist.name = newName;\n                console.log(response.data.idNamePairs)  // see if this changed:\n                async function updateList(playlist) {\n                    response = await api.updatePlaylistById(playlist._id, playlist);\n                    if (response.data.success) {\n                        console.log(response.data)\n                        async function getListPairs(playlist) {\n                            response = await api.getPlaylistPairs();\n                            if (response.data.success) {\n                                let pairsArray = response.data.idNamePairs;\n                                storeReducer({\n                                    type: GlobalStoreActionType.CHANGE_LIST_NAME,\n                                    payload: {\n                                        idNamePairs: pairsArray,\n                                        playlist: playlist\n                                    }\n                                });\n                            }\n                        }\n                        getListPairs(playlist);\n                    }\n                }\n                updateList(playlist);\n            }\n        }\n        asyncChangeListName(id);\n    }\n\n    store.setMarkedPlaylist = function (idNamePair) {\n        storeReducer({\n            type: GlobalStoreActionType.MARK_LIST_FOR_DELETION,\n            payload: idNamePair\n        })\n        store.enableDeleteListModal();\n    }\n\n    store.callDeleteList = function () {\n        store.hideDeleteListModal();\n        store.deleteList(store.idToDelete);\n    }\n\n    store.deleteList = function (id) {\n        async function asyncDeleteList(id) {\n            let response = await api.deletePlaylistById(id)\n            if (response.data.success) {\n                store.loadIdNamePairs();    // Refresh playlist\n                store.history.push(\"/\")\n            }\n        }\n        asyncDeleteList(id);\n    }\n\n    store.enableDeleteListModal = function () {\n        let modal = document.getElementById(\"delete-list-modal\");\n        modal.classList.add(\"is-visible\");\n    }\n\n    store.hideDeleteListModal = function () {\n        document.getElementById(\"delete-list-modal\").classList.remove(\"is-visible\");\n    }\n\n    // THIS FUNCTION PROCESSES CLOSING THE CURRENTLY LOADED LIST\n    store.closeCurrentList = function () {\n        storeReducer({\n            type: GlobalStoreActionType.CLOSE_CURRENT_LIST,\n            payload: {}\n        });\n    }\n\n    // THIS FUNCTION LOADS ALL THE ID, NAME PAIRS SO WE CAN LIST ALL THE LISTS\n    store.loadIdNamePairs = function () {\n        async function asyncLoadIdNamePairs() {\n            const response = await api.getPlaylistPairs();\n            if (response.data.success) {\n                let pairsArray = response.data.idNamePairs;\n                storeReducer({\n                    type: GlobalStoreActionType.LOAD_ID_NAME_PAIRS,\n                    payload: pairsArray\n                });\n            }\n            else {\n                console.log(\"API FAILED TO GET THE LIST PAIRS\");\n            }\n        }\n        asyncLoadIdNamePairs();\n    }\n\n    store.setCurrentList = function (id) {\n        async function asyncSetCurrentList(id) {\n            let response = await api.getPlaylistById(id);\n            if (response.data.success) {\n                let playlist = response.data.playlist;\n\n                if (response.data.success) {\n                    storeReducer({\n                        type: GlobalStoreActionType.SET_CURRENT_LIST,\n                        payload: playlist\n                    });\n                    store.history.push(\"/playlist/\" + playlist._id);\n                }\n            }\n        }\n        asyncSetCurrentList(id);\n    }\n\n    store.addSong = function () {\n        const playlist = store.currentList;\n        let song = {\n            artist: \"Untitled\",\n            title: \"Unknown\",\n            youTubeId: \"EpX1_YJPGAY\"\n        }\n        playlist.songs.push(song)\n        async function asyncAddSong() {\n            let response = await api.updatePlaylistById(store.currentList._id, playlist)\n            if (response.data.success) {\n                storeReducer({\n                    type: GlobalStoreActionType.SET_CURRENT_LIST,\n                    payload: store.currentList\n                })\n            }\n        }\n        asyncAddSong();\n    }\n\n    // store.deleteSong = function (index) {\n        \n    // }\n\n    store.showDeleteSongModal = function (index) {\n        storeReducer({\n            type: GlobalStoreActionType.SET_EDIT_SONG_ACTIVE,\n            payload: song\n        });\n        document.getElementById(\"delete-song-modal\").classList.add(\"is-visible\");\n    }\n\n    store.hideDeleteSongModal = function () {\n        document.getElementById(\"delete-song-modal\").classList.remove(\"is-visible\");\n    }\n\n    store.getPlaylistSize = function() {\n        return store.currentList.songs.length;\n    }\n    store.undo = function () {\n        console.log(store);\n        tps.undoTransaction();\n    }\n    store.redo = function () {\n        tps.doTransaction();\n    }\n\n    // THIS FUNCTION ENABLES THE PROCESS OF EDITING A LIST NAME\n    store.setIsListNameEditActive = function () {\n        storeReducer({\n            type: GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE,\n            payload: null\n        });\n    }\n\n    // THIS GIVES OUR STORE AND ITS REDUCER TO ANY COMPONENT THAT NEEDS IT\n    return { store, storeReducer };\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}