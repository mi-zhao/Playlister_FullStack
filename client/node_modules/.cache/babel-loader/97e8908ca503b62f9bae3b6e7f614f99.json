{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { createContext, useEffect, useState } from 'react';\nimport jsTPS from '../common/jsTPS';\nimport api, { updatePlaylistById } from '../api';\nimport AddSong_Transaction from '../transactions/AddSong_Transaction';\nimport DeleteSong_Transaction from '../transactions/DeleteSong_Transaction';\nimport EditSong_Transaction from '../transactions/EditSong_Transaction';\nimport MoveSong_Transaction from '../transactions/MoveSong_Transaction';\nexport const GlobalStoreContext = /*#__PURE__*/createContext({});\n/*\n    This is our global data store. Note that it uses the Flux design pattern,\n    which makes use of things like actions and reducers. \n    \n    @author McKilla Gorilla\n*/\n// THESE ARE ALL THE TYPES OF UPDATES TO OUR GLOBAL\n// DATA STORE STATE THAT CAN BE PROCESSED\n\nexport const GlobalStoreActionType = {\n  CHANGE_LIST_NAME: \"CHANGE_LIST_NAME\",\n  CLOSE_CURRENT_LIST: \"CLOSE_CURRENT_LIST\",\n  CREATE_NEW_LIST: \"CREATE_NEW_LIST\",\n  LOAD_ID_NAME_PAIRS: \"LOAD_ID_NAME_PAIRS\",\n  SET_CURRENT_LIST: \"SET_CURRENT_LIST\",\n  SET_LIST_NAME_EDIT_ACTIVE: \"SET_LIST_NAME_EDIT_ACTIVE\",\n  MARK_LIST_FOR_DELETION: \"MARK_LIST_FOR_DELETION\",\n  SET_EDIT_SONG_ACTIVE: \"SET_EDIT_SONG_ACTIVE\"\n}; // WE'LL NEED THIS TO PROCESS TRANSACTIONS\n\nconst tps = new jsTPS(); // WITH THIS WE'RE MAKING OUR GLOBAL DATA STORE\n// AVAILABLE TO THE REST OF THE APPLICATION\n\nexport const useGlobalStore = () => {\n  _s();\n\n  // THESE ARE ALL THE THINGS OUR DATA STORE WILL MANAGE\n  const [store, setStore] = useState({\n    idNamePairs: [],\n    currentList: null,\n    newListCounter: 0,\n    listNameActive: false,\n    idToDelete: null,\n    playlistName: \"\",\n    currentSongIndex: \"\"\n  }); // HERE'S THE DATA STORE'S REDUCER, IT MUST\n  // HANDLE EVERY TYPE OF STATE CHANGE\n\n  const storeReducer = action => {\n    const {\n      type,\n      payload\n    } = action;\n\n    switch (type) {\n      // LIST UPDATE OF ITS NAME\n      case GlobalStoreActionType.CHANGE_LIST_NAME:\n        {\n          return setStore({\n            idNamePairs: payload.idNamePairs,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            idToDelete: null,\n            playlistName: null,\n            currentSongIndex: null,\n            currentSongArtist: \"\",\n            currentSongTitle: \"\"\n          });\n        }\n      // STOP EDITING THE CURRENT LIST\n\n      case GlobalStoreActionType.CLOSE_CURRENT_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            idToDelete: null,\n            playlistName: null,\n            currentSongIndex: null,\n            currentSongArtist: \"\",\n            currentSongTitle: \"\"\n          });\n        }\n      // CREATE A NEW LIST\n\n      case GlobalStoreActionType.CREATE_NEW_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            newListCounter: store.newListCounter + 1,\n            listNameActive: false,\n            idToDelete: null,\n            playlistName: null,\n            currentSongIndex: null,\n            currentSongArtist: \"\",\n            currentSongTitle: \"\"\n          });\n        }\n      // GET ALL THE LISTS SO WE CAN PRESENT THEM\n\n      case GlobalStoreActionType.LOAD_ID_NAME_PAIRS:\n        {\n          return setStore({\n            idNamePairs: payload,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            idToDelete: null,\n            playlistName: null,\n            currentSongIndex: null,\n            currentSongArtist: \"\",\n            currentSongTitle: \"\"\n          });\n        }\n      // PREPARE TO DELETE A LIST\n\n      case GlobalStoreActionType.MARK_LIST_FOR_DELETION:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: null,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            idToDelete: payload._id,\n            playlistName: payload.name,\n            currentSongIndex: null,\n            currentSongArtist: \"\",\n            currentSongTitle: \"\"\n          });\n        }\n      // UPDATE A LIST\n\n      case GlobalStoreActionType.SET_CURRENT_LIST:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            newListCounter: store.newListCounter,\n            listNameActive: false,\n            idToDelete: null,\n            playlistName: null,\n            currentSongIndex: null,\n            currentSongArtist: \"\",\n            currentSongTitle: \"\"\n          });\n        }\n      // START EDITING A LIST NAME\n\n      case GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: payload,\n            newListCounter: store.newListCounter,\n            listNameActive: true,\n            idToDelete: null,\n            playlistName: null,\n            currentSongIndex: null,\n            currentSongArtist: \"\",\n            currentSongTitle: \"\"\n          });\n        }\n\n      case GlobalStoreActionType.SET_EDIT_SONG_ACTIVE:\n        {\n          return setStore({\n            idNamePairs: store.idNamePairs,\n            currentList: store.currentList,\n            newListCounter: store.newListCounter,\n            listNameActive: store.listNameActive,\n            idToDelete: store.idToDelete,\n            playlistName: store.playlistName,\n            currentSongIndex: payload.index,\n            currentSongArtist: payload.artist,\n            currentSongTitle: payload.title\n          });\n        }\n\n      default:\n        return store;\n    }\n  }; // THESE ARE THE FUNCTIONS THAT WILL UPDATE OUR STORE AND\n  // DRIVE THE STATE OF THE APPLICATION. WE'LL CALL THESE IN \n  // RESPONSE TO EVENTS INSIDE OUR COMPONENTS.\n\n\n  store.createNewList = function () {\n    async function asyncCreateNewList() {\n      let newlist = {\n        name: \"Untitled\",\n        songs: []\n      };\n      let response = await api.createPlaylist(newlist);\n\n      if (response.data.success) {\n        let playlist = response.data.playlist;\n        storeReducer({\n          type: GlobalStoreActionType.CREATE_NEW_LIST,\n          payload: playlist\n        }); // Edit mode right after list is made:\n\n        store.history.push(\"/playlist/\" + playlist._id); // Changes browser/client URL (Ex. history.push(‘/‘) changes to https://localhost:3000/)\n      }\n    }\n\n    asyncCreateNewList();\n    tps.clearAllTransactions();\n    store.checkUndoRedo();\n  }; // THIS FUNCTION PROCESSES CHANGING A LIST NAME\n\n\n  store.changeListName = function (id, newName) {\n    if (newName !== \"\") {\n      // GET THE LIST\n      async function asyncChangeListName(id) {\n        let response = await api.getPlaylistById(id);\n\n        if (response.data.success) {\n          let playlist = response.data.playlist;\n          playlist.name = newName;\n          console.log(response.data.idNamePairs); // see if this changed:\n\n          async function updateList(playlist) {\n            response = await api.updatePlaylistById(playlist._id, playlist);\n\n            if (response.data.success) {\n              console.log(response.data);\n\n              async function getListPairs(playlist) {\n                response = await api.getPlaylistPairs();\n\n                if (response.data.success) {\n                  let pairsArray = response.data.idNamePairs;\n                  storeReducer({\n                    type: GlobalStoreActionType.CHANGE_LIST_NAME,\n                    payload: {\n                      idNamePairs: pairsArray,\n                      playlist: playlist\n                    }\n                  });\n                }\n              }\n\n              getListPairs(playlist);\n            }\n          }\n\n          updateList(playlist);\n        }\n      }\n\n      asyncChangeListName(id);\n    }\n  };\n\n  store.setMarkedPlaylist = function (idNamePair) {\n    storeReducer({\n      type: GlobalStoreActionType.MARK_LIST_FOR_DELETION,\n      payload: idNamePair\n    });\n    store.enableDeleteListModal();\n  };\n\n  store.callDeleteList = function () {\n    store.hideDeleteListModal();\n    store.deleteList(store.idToDelete);\n  };\n\n  store.deleteList = function (id) {\n    async function asyncDeleteList(id) {\n      let response = await api.deletePlaylistById(id);\n\n      if (response.data.success) {\n        store.loadIdNamePairs(); // Refresh playlist\n\n        store.history.push(\"/\");\n      }\n    }\n\n    asyncDeleteList(id);\n  };\n\n  store.enableDeleteListModal = function () {\n    let modal = document.getElementById(\"delete-list-modal\");\n    modal.classList.add(\"is-visible\");\n  };\n\n  store.hideDeleteListModal = function () {\n    document.getElementById(\"delete-list-modal\").classList.remove(\"is-visible\"); // store.checkUndoRedo();\n  }; // THIS FUNCTION PROCESSES CLOSING THE CURRENTLY LOADED LIST\n\n\n  store.closeCurrentList = function () {\n    storeReducer({\n      type: GlobalStoreActionType.CLOSE_CURRENT_LIST,\n      payload: {}\n    });\n  }; // THIS FUNCTION LOADS ALL THE ID, NAME PAIRS SO WE CAN LIST ALL THE LISTS\n\n\n  store.loadIdNamePairs = function () {\n    async function asyncLoadIdNamePairs() {\n      const response = await api.getPlaylistPairs();\n\n      if (response.data.success) {\n        let pairsArray = response.data.idNamePairs;\n        storeReducer({\n          type: GlobalStoreActionType.LOAD_ID_NAME_PAIRS,\n          payload: pairsArray\n        });\n      } else {\n        console.log(\"API FAILED TO GET THE LIST PAIRS\");\n      }\n    }\n\n    asyncLoadIdNamePairs();\n    store.disableEditToolBarButtons();\n  };\n\n  store.setCurrentList = function (id) {\n    async function asyncSetCurrentList(id) {\n      let response = await api.getPlaylistById(id);\n\n      if (response.data.success) {\n        let playlist = response.data.playlist;\n\n        if (response.data.success) {\n          storeReducer({\n            type: GlobalStoreActionType.SET_CURRENT_LIST,\n            payload: playlist\n          });\n          store.history.push(\"/playlist/\" + playlist._id);\n        }\n      }\n    }\n\n    asyncSetCurrentList(id);\n    tps.clearAllTransactions();\n    store.checkUndoRedo();\n  };\n\n  store.moveSongTransaction = function (from, to) {\n    let transaction = new MoveSong_Transaction(store, from, to);\n    tps.addTransaction(transaction);\n    store.checkUndoRedo();\n  };\n\n  store.moveSong = function (from, to) {\n    const fromSong = store.currentList.songs[from];\n    const toSong = store.currentList.songs[to];\n    const playlist = store.currentList;\n    playlist.songs[from] = toSong;\n    playlist.songs[to] = fromSong;\n\n    async function asyncMoveSong() {\n      let response = await updatePlaylistById(store.currentList._id, playlist);\n\n      if (response.data.success) {\n        storeReducer({\n          type: GlobalStoreActionType.SET_CURRENT_LIST,\n          payload: playlist\n        });\n      }\n    }\n\n    asyncMoveSong();\n  };\n\n  store.addSongTransaction = function () {\n    let transaction = new AddSong_Transaction(store, this.currentList.songs.length);\n    tps.addTransaction(transaction);\n    store.checkUndoRedo();\n  };\n\n  store.addSong = function (song) {\n    const playlist = store.currentList;\n    playlist.songs.push(song);\n\n    async function asyncAddSong() {\n      let response = await api.updatePlaylistById(store.currentList._id, playlist);\n\n      if (response.data.success) {\n        storeReducer({\n          type: GlobalStoreActionType.SET_CURRENT_LIST,\n          payload: store.currentList\n        });\n      }\n    }\n\n    asyncAddSong();\n  };\n\n  store.deleteSongTransaction = function () {\n    let transaction = new DeleteSong_Transaction(store, store.currentSongIndex);\n    tps.addTransaction(transaction);\n    store.checkUndoRedo();\n  };\n\n  store.deleteSong = function (index) {\n    const playlist = store.currentList;\n    playlist.songs.splice(index, 1);\n\n    async function asyncDeleteSong() {\n      let response = await api.updatePlaylistById(store.currentList._id, playlist);\n\n      if (response.data.success) {\n        storeReducer({\n          type: GlobalStoreActionType.SET_CURRENT_LIST,\n          payload: store.currentList\n        });\n        store.hideDeleteSongModal();\n      }\n    }\n\n    asyncDeleteSong();\n  };\n\n  store.undoDeleteSong = function (index, song) {\n    const playlist = store.currentList;\n    playlist.songs.splice(index, 0, song);\n\n    async function asyncUndoDeleteSong() {\n      let response = await api.updatePlaylistById(store.currentList._id, playlist);\n\n      if (response.data.success) {\n        storeReducer({\n          type: GlobalStoreActionType.SET_CURRENT_LIST,\n          payload: store.currentList\n        });\n      }\n    }\n\n    asyncUndoDeleteSong();\n  };\n\n  store.showDeleteSongModal = function (index) {\n    let song = {\n      index: index,\n      title: store.currentList.songs[index].title,\n      artist: store.currentList.songs[index].artist\n    };\n    storeReducer({\n      type: GlobalStoreActionType.SET_EDIT_SONG_ACTIVE,\n      payload: song\n    });\n    document.getElementById(\"delete-song-modal\").classList.add(\"is-visible\");\n    store.disableEditToolBarButtons();\n  };\n\n  store.hideDeleteSongModal = function () {\n    document.getElementById(\"delete-song-modal\").classList.remove(\"is-visible\");\n    store.checkUndoRedo();\n  };\n\n  store.editSongTransaction = function () {\n    let playlist = store.currentList;\n    let originalsong = {\n      id: playlist.songs[store.currentSongIndex]._id,\n      title: playlist.songs[store.currentSongIndex].title,\n      artist: playlist.songs[store.currentSongIndex].artist,\n      youTubeId: playlist.songs[store.currentSongIndex].youTubeId\n    };\n    let newsong = {\n      id: playlist.songs[store.currentSongIndex]._id,\n      title: document.getElementById(\"songtitle\").value,\n      artist: document.getElementById(\"songartist\").value,\n      youTubeId: document.getElementById(\"youtubeid\").value\n    };\n    let transaction = new EditSong_Transaction(store, store.currentSongIndex, originalsong, newsong);\n    tps.addTransaction(transaction);\n    store.checkUndoRedo();\n  };\n\n  store.editSong = function (index, title, artist, youtubeid) {\n    const playlist = store.currentList;\n    playlist.songs[index].title = title;\n    playlist.songs[index].artist = artist;\n    playlist.songs[index].youTubeId = youtubeid;\n    console.log(\"playlist\", playlist.songs[store.currentSongIndex]);\n\n    async function asyncEditSong() {\n      let response = await api.updatePlaylistById(store.currentList._id, playlist);\n\n      if (response.data.success) {\n        storeReducer({\n          type: GlobalStoreActionType.SET_CURRENT_LIST,\n          payload: store.currentList\n        });\n        store.hideEditSongModal();\n      }\n    }\n\n    asyncEditSong();\n  };\n\n  store.showEditSongModal = function (index) {\n    let title = store.currentList.songs[index].title;\n    let artist = store.currentList.songs[index].artist;\n    let youTubeId = store.currentList.songs[index].youTubeId;\n    let song = {\n      index: index,\n      title: title,\n      artist: artist\n    };\n    storeReducer({\n      type: GlobalStoreActionType.SET_EDIT_SONG_ACTIVE,\n      payload: song\n    });\n    document.getElementById(\"songtitle\").value = title;\n    document.getElementById(\"songartist\").value = artist;\n    document.getElementById(\"youtubeid\").value = youTubeId;\n    document.getElementById(\"edit-song-modal\").classList.add(\"is-visible\");\n    store.disableEditToolBarButtons();\n  };\n\n  store.hideEditSongModal = function () {\n    document.getElementById(\"edit-song-modal\").classList.remove(\"is-visible\");\n    store.checkUndoRedo();\n  };\n\n  store.getPlaylistSize = function () {\n    return store.currentList.songs.length;\n  };\n\n  store.undo = () => {\n    if (tps.hasTransactionToUndo()) {\n      tps.undoTransaction();\n    }\n\n    store.checkUndoRedo();\n  }; // THIS FUNCTION BEGINS THE PROCESS OF PERFORMING A REDO\n\n\n  store.redo = () => {\n    if (tps.hasTransactionToRedo()) {\n      tps.doTransaction();\n    }\n\n    store.checkUndoRedo();\n  };\n\n  useEffect(() => {\n    document.addEventListener('keydown', store);\n    return () => {\n      document.removeEventListener('keydown', store);\n    };\n  }, [store]);\n\n  store.checkUndoRedo = function () {\n    document.getElementById(\"add-song-button\").disabled = false;\n    document.getElementById(\"close-button\").disabled = false;\n    let undoButton = document.getElementById(\"undo-button\");\n    let redoButton = document.getElementById(\"redo-button\");\n\n    if (tps.getUndoSize() === 0) {\n      undoButton.disabled = true;\n    } else {\n      undoButton.disabled = false;\n    }\n\n    if (tps.getRedoSize() === 0) {\n      redoButton.disabled = true;\n    } else {\n      redoButton.disabled = false;\n    }\n  };\n\n  store.disableEditToolBarButtons = function () {\n    document.getElementById(\"undo-button\").disabled = true;\n    document.getElementById(\"redo-button\").disabled = true;\n    document.getElementById(\"close-button\").disabled = true;\n    document.getElementById(\"add-song-button\").disabled = true;\n  }; // THIS FUNCTION ENABLES THE PROCESS OF EDITING A LIST NAME\n\n\n  store.setIsListNameEditActive = function () {\n    storeReducer({\n      type: GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE,\n      payload: null\n    });\n    store.disableEditToolBarButtons();\n  }; // THIS GIVES OUR STORE AND ITS REDUCER TO ANY COMPONENT THAT NEEDS IT\n\n\n  return {\n    store,\n    storeReducer\n  };\n};\n\n_s(useGlobalStore, \"/togOimBexKHrhG2T6xMFBdnbmA=\");","map":{"version":3,"names":["createContext","useEffect","useState","jsTPS","api","updatePlaylistById","AddSong_Transaction","DeleteSong_Transaction","EditSong_Transaction","MoveSong_Transaction","GlobalStoreContext","GlobalStoreActionType","CHANGE_LIST_NAME","CLOSE_CURRENT_LIST","CREATE_NEW_LIST","LOAD_ID_NAME_PAIRS","SET_CURRENT_LIST","SET_LIST_NAME_EDIT_ACTIVE","MARK_LIST_FOR_DELETION","SET_EDIT_SONG_ACTIVE","tps","useGlobalStore","store","setStore","idNamePairs","currentList","newListCounter","listNameActive","idToDelete","playlistName","currentSongIndex","storeReducer","action","type","payload","currentSongArtist","currentSongTitle","_id","name","index","artist","title","createNewList","asyncCreateNewList","newlist","songs","response","createPlaylist","data","success","playlist","history","push","clearAllTransactions","checkUndoRedo","changeListName","id","newName","asyncChangeListName","getPlaylistById","console","log","updateList","getListPairs","getPlaylistPairs","pairsArray","setMarkedPlaylist","idNamePair","enableDeleteListModal","callDeleteList","hideDeleteListModal","deleteList","asyncDeleteList","deletePlaylistById","loadIdNamePairs","modal","document","getElementById","classList","add","remove","closeCurrentList","asyncLoadIdNamePairs","disableEditToolBarButtons","setCurrentList","asyncSetCurrentList","moveSongTransaction","from","to","transaction","addTransaction","moveSong","fromSong","toSong","asyncMoveSong","addSongTransaction","length","addSong","song","asyncAddSong","deleteSongTransaction","deleteSong","splice","asyncDeleteSong","hideDeleteSongModal","undoDeleteSong","asyncUndoDeleteSong","showDeleteSongModal","editSongTransaction","originalsong","youTubeId","newsong","value","editSong","youtubeid","asyncEditSong","hideEditSongModal","showEditSongModal","getPlaylistSize","undo","hasTransactionToUndo","undoTransaction","redo","hasTransactionToRedo","doTransaction","addEventListener","removeEventListener","disabled","undoButton","redoButton","getUndoSize","getRedoSize","setIsListNameEditActive"],"sources":["/Users/michelle/Projects/Playlister_HW3/client/src/store/index.js"],"sourcesContent":["import { createContext, useEffect, useState } from 'react'\nimport jsTPS from '../common/jsTPS'\nimport api, { updatePlaylistById } from '../api'\nimport AddSong_Transaction from '../transactions/AddSong_Transaction';\nimport DeleteSong_Transaction from '../transactions/DeleteSong_Transaction';\nimport EditSong_Transaction from '../transactions/EditSong_Transaction';\nimport MoveSong_Transaction from '../transactions/MoveSong_Transaction';\nexport const GlobalStoreContext = createContext({});\n/*\n    This is our global data store. Note that it uses the Flux design pattern,\n    which makes use of things like actions and reducers. \n    \n    @author McKilla Gorilla\n*/\n\n// THESE ARE ALL THE TYPES OF UPDATES TO OUR GLOBAL\n// DATA STORE STATE THAT CAN BE PROCESSED\nexport const GlobalStoreActionType = {\n    CHANGE_LIST_NAME: \"CHANGE_LIST_NAME\",\n    CLOSE_CURRENT_LIST: \"CLOSE_CURRENT_LIST\",\n    CREATE_NEW_LIST: \"CREATE_NEW_LIST\",\n    LOAD_ID_NAME_PAIRS: \"LOAD_ID_NAME_PAIRS\",\n    SET_CURRENT_LIST: \"SET_CURRENT_LIST\",\n    SET_LIST_NAME_EDIT_ACTIVE: \"SET_LIST_NAME_EDIT_ACTIVE\",\n    MARK_LIST_FOR_DELETION: \"MARK_LIST_FOR_DELETION\",\n    SET_EDIT_SONG_ACTIVE: \"SET_EDIT_SONG_ACTIVE\"\n}\n\n// WE'LL NEED THIS TO PROCESS TRANSACTIONS\nconst tps = new jsTPS();\n\n// WITH THIS WE'RE MAKING OUR GLOBAL DATA STORE\n// AVAILABLE TO THE REST OF THE APPLICATION\nexport const useGlobalStore = () => {\n    // THESE ARE ALL THE THINGS OUR DATA STORE WILL MANAGE\n    const [store, setStore] = useState({\n        idNamePairs: [],\n        currentList: null,\n        newListCounter: 0,\n        listNameActive: false,\n        idToDelete: null,\n        playlistName: \"\",\n        currentSongIndex: \"\"\n    });\n\n    // HERE'S THE DATA STORE'S REDUCER, IT MUST\n    // HANDLE EVERY TYPE OF STATE CHANGE\n    const storeReducer = (action) => {\n        const { type, payload } = action;\n        switch (type) {\n            // LIST UPDATE OF ITS NAME\n            case GlobalStoreActionType.CHANGE_LIST_NAME: {\n                return setStore({\n                    idNamePairs: payload.idNamePairs,\n                    currentList: null,\n                    newListCounter: store.newListCounter,\n                    listNameActive: false,\n                    idToDelete: null,\n                    playlistName: null,\n                    currentSongIndex: null,\n                    currentSongArtist: \"\",\n                    currentSongTitle: \"\",\n                });\n            }\n            // STOP EDITING THE CURRENT LIST\n            case GlobalStoreActionType.CLOSE_CURRENT_LIST: {\n                return setStore({\n                    idNamePairs: store.idNamePairs, \n                    currentList: null,\n                    newListCounter: store.newListCounter,\n                    listNameActive: false,\n                    idToDelete: null,\n                    playlistName: null,\n                    currentSongIndex: null,\n                    currentSongArtist: \"\",\n                    currentSongTitle: \"\",\n                })\n            }\n            // CREATE A NEW LIST\n            case GlobalStoreActionType.CREATE_NEW_LIST: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: payload,\n                    newListCounter: store.newListCounter + 1,\n                    listNameActive: false,\n                    idToDelete: null,\n                    playlistName: null,\n                    currentSongIndex: null,\n                    currentSongArtist: \"\",\n                    currentSongTitle: \"\",\n                })\n            }\n            // GET ALL THE LISTS SO WE CAN PRESENT THEM\n            case GlobalStoreActionType.LOAD_ID_NAME_PAIRS: {\n                return setStore({\n                    idNamePairs: payload,\n                    currentList: null,\n                    newListCounter: store.newListCounter,\n                    listNameActive: false,\n                    idToDelete: null,\n                    playlistName: null,\n                    currentSongIndex: null,\n                    currentSongArtist: \"\",\n                    currentSongTitle: \"\",\n                });\n            }\n            // PREPARE TO DELETE A LIST\n            case GlobalStoreActionType.MARK_LIST_FOR_DELETION: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: null,\n                    newListCounter: store.newListCounter,\n                    listNameActive: false,\n                    idToDelete: payload._id,\n                    playlistName: payload.name,\n                    currentSongIndex: null,\n                    currentSongArtist: \"\",\n                    currentSongTitle: \"\",\n                });\n            }\n            // UPDATE A LIST\n            case GlobalStoreActionType.SET_CURRENT_LIST: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: payload,\n                    newListCounter: store.newListCounter,\n                    listNameActive: false,\n                    idToDelete: null,\n                    playlistName: null,\n                    currentSongIndex: null,\n                    currentSongArtist: \"\",\n                    currentSongTitle: \"\",\n                });\n            }\n            // START EDITING A LIST NAME\n            case GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: payload,\n                    newListCounter: store.newListCounter,\n                    listNameActive: true,\n                    idToDelete: null,\n                    playlistName: null,\n                    currentSongIndex: null,\n                    currentSongArtist: \"\",\n                    currentSongTitle: \"\",\n                });\n            }\n            case GlobalStoreActionType.SET_EDIT_SONG_ACTIVE: {\n                return setStore({\n                    idNamePairs: store.idNamePairs,\n                    currentList: store.currentList,\n                    newListCounter: store.newListCounter,\n                    listNameActive: store.listNameActive,\n                    idToDelete: store.idToDelete,\n                    playlistName: store.playlistName,\n                    currentSongIndex: payload.index,\n                    currentSongArtist: payload.artist,\n                    currentSongTitle: payload.title,\n                });\n            }\n            default:\n                return store;\n        }\n    }\n    // THESE ARE THE FUNCTIONS THAT WILL UPDATE OUR STORE AND\n    // DRIVE THE STATE OF THE APPLICATION. WE'LL CALL THESE IN \n    // RESPONSE TO EVENTS INSIDE OUR COMPONENTS.\n\n    store.createNewList = function () {\n        async function asyncCreateNewList() {\n            let newlist = {\n                name: \"Untitled\",\n                songs: []\n            }\n            let response = await api.createPlaylist(newlist);\n            if (response.data.success) {\n                let playlist = response.data.playlist;\n                storeReducer({\n                    type: GlobalStoreActionType.CREATE_NEW_LIST,\n                    payload: playlist\n                });\n                // Edit mode right after list is made:\n                store.history.push(\"/playlist/\" + playlist._id) // Changes browser/client URL (Ex. history.push(‘/‘) changes to https://localhost:3000/)\n            }\n        }\n        asyncCreateNewList();\n        tps.clearAllTransactions();\n        store.checkUndoRedo();\n    }\n\n    // THIS FUNCTION PROCESSES CHANGING A LIST NAME\n    store.changeListName = function (id, newName) {\n        if (newName !== \"\"){\n            // GET THE LIST\n            async function asyncChangeListName(id) {\n                let response = await api.getPlaylistById(id);\n                if (response.data.success) {\n                    let playlist = response.data.playlist;\n                    playlist.name = newName;\n                    console.log(response.data.idNamePairs)  // see if this changed:\n                    async function updateList(playlist) {\n                        response = await api.updatePlaylistById(playlist._id, playlist);\n                        if (response.data.success) {\n                            console.log(response.data)\n                            async function getListPairs(playlist) {\n                                response = await api.getPlaylistPairs();\n                                if (response.data.success) {\n                                    let pairsArray = response.data.idNamePairs;\n                                    storeReducer({\n                                        type: GlobalStoreActionType.CHANGE_LIST_NAME,\n                                        payload: {\n                                            idNamePairs: pairsArray,\n                                            playlist: playlist\n                                        }\n                                    });\n                                }\n                            }\n                            getListPairs(playlist);\n                        }\n                    }\n                    updateList(playlist);\n                }\n            }\n            asyncChangeListName(id);\n        }\n    }\n\n    store.setMarkedPlaylist = function (idNamePair) {\n        storeReducer({\n            type: GlobalStoreActionType.MARK_LIST_FOR_DELETION,\n            payload: idNamePair\n        })\n        store.enableDeleteListModal();\n    }\n\n    store.callDeleteList = function () {\n        store.hideDeleteListModal();\n        store.deleteList(store.idToDelete);\n    }\n\n    store.deleteList = function (id) {\n        async function asyncDeleteList(id) {\n            let response = await api.deletePlaylistById(id)\n            if (response.data.success) {\n                store.loadIdNamePairs();    // Refresh playlist\n                store.history.push(\"/\")\n            }\n        }\n        asyncDeleteList(id);\n    }\n\n    store.enableDeleteListModal = function () {\n        let modal = document.getElementById(\"delete-list-modal\");\n        modal.classList.add(\"is-visible\");\n    }\n\n    store.hideDeleteListModal = function () {\n        document.getElementById(\"delete-list-modal\").classList.remove(\"is-visible\");\n        // store.checkUndoRedo();\n    }\n\n    // THIS FUNCTION PROCESSES CLOSING THE CURRENTLY LOADED LIST\n    store.closeCurrentList = function () {\n        storeReducer({\n            type: GlobalStoreActionType.CLOSE_CURRENT_LIST,\n            payload: {}\n        });\n    }\n\n    // THIS FUNCTION LOADS ALL THE ID, NAME PAIRS SO WE CAN LIST ALL THE LISTS\n    store.loadIdNamePairs = function () {\n        async function asyncLoadIdNamePairs() {\n            const response = await api.getPlaylistPairs();\n            if (response.data.success) {\n                let pairsArray = response.data.idNamePairs;\n                storeReducer({\n                    type: GlobalStoreActionType.LOAD_ID_NAME_PAIRS,\n                    payload: pairsArray\n                });\n            }\n            else {\n                console.log(\"API FAILED TO GET THE LIST PAIRS\");\n            }\n        }\n        asyncLoadIdNamePairs();\n        store.disableEditToolBarButtons();\n    }\n\n    store.setCurrentList = function (id) {\n        async function asyncSetCurrentList(id) {\n            let response = await api.getPlaylistById(id);\n            if (response.data.success) {\n                let playlist = response.data.playlist;\n\n                if (response.data.success) {\n                    storeReducer({\n                        type: GlobalStoreActionType.SET_CURRENT_LIST,\n                        payload: playlist\n                    });\n                    store.history.push(\"/playlist/\" + playlist._id);\n                }\n            }\n        }\n        asyncSetCurrentList(id);\n        tps.clearAllTransactions();\n        store.checkUndoRedo();\n    }\n\n    store.moveSongTransaction = function (from, to) {\n        let transaction = new MoveSong_Transaction(store, from ,to);\n        tps.addTransaction(transaction);\n        store.checkUndoRedo();\n    }\n\n    store.moveSong = function (from, to) {\n        const fromSong = store.currentList.songs[from]\n        const toSong = store.currentList.songs[to]\n\n        const playlist = store.currentList\n        playlist.songs[from] = toSong\n        playlist.songs[to] = fromSong\n    \n        async function asyncMoveSong() {\n            let response = await updatePlaylistById(store.currentList._id, playlist)\n            if (response.data.success) {\n                storeReducer({\n                    type: GlobalStoreActionType.SET_CURRENT_LIST,\n                    payload: playlist\n                })\n            }\n        }\n        asyncMoveSong();\n    }\n\n    store.addSongTransaction = function () {\n        let transaction = new AddSong_Transaction(store, this.currentList.songs.length);\n        tps.addTransaction(transaction);\n        store.checkUndoRedo();\n    }\n\n    store.addSong = function (song) {\n        const playlist = store.currentList;\n        playlist.songs.push(song)\n        async function asyncAddSong() {\n            let response = await api.updatePlaylistById(store.currentList._id, playlist)\n            if (response.data.success) {\n                storeReducer({\n                    type: GlobalStoreActionType.SET_CURRENT_LIST,\n                    payload: store.currentList\n                })\n            } \n        }\n        asyncAddSong();\n    }\n\n    store.deleteSongTransaction = function () {\n        let transaction = new DeleteSong_Transaction(store, store.currentSongIndex)\n        tps.addTransaction(transaction);\n        store.checkUndoRedo();\n    }\n\n    store.deleteSong = function(index) {\n        const playlist = store.currentList;\n        playlist.songs.splice(index, 1);\n\n        async function asyncDeleteSong() {\n            let response = await api.updatePlaylistById(store.currentList._id, playlist)\n            if (response.data.success) {\n                storeReducer({\n                    type: GlobalStoreActionType.SET_CURRENT_LIST,\n                    payload: store.currentList\n                })\n                store.hideDeleteSongModal();\n            }\n        }\n        asyncDeleteSong();\n    }\n\n    store.undoDeleteSong = function(index, song) {\n        const playlist = store.currentList\n        playlist.songs.splice(index, 0, song);\n\n        async function asyncUndoDeleteSong() {\n            let response = await api.updatePlaylistById(store.currentList._id, playlist)\n            if (response.data.success) {\n                storeReducer({\n                    type: GlobalStoreActionType.SET_CURRENT_LIST,\n                    payload: store.currentList\n                })\n            }\n        }\n        asyncUndoDeleteSong();\n    }\n\n    store.showDeleteSongModal = function(index) {\n        let song = {\n            index: index,\n            title: store.currentList.songs[index].title,\n            artist: store.currentList.songs[index].artist,\n        }\n        storeReducer({\n            type: GlobalStoreActionType.SET_EDIT_SONG_ACTIVE,\n            payload: song\n        });\n        document.getElementById(\"delete-song-modal\").classList.add(\"is-visible\");\n        store.disableEditToolBarButtons();\n    }\n\n    store.hideDeleteSongModal = function () {\n        document.getElementById(\"delete-song-modal\").classList.remove(\"is-visible\");\n        store.checkUndoRedo();\n    }\n\n    store.editSongTransaction = function () {\n        let playlist = store.currentList\n\n        let originalsong = {\n            id: playlist.songs[store.currentSongIndex]._id,\n            title: playlist.songs[store.currentSongIndex].title,\n            artist: playlist.songs[store.currentSongIndex].artist,\n            youTubeId: playlist.songs[store.currentSongIndex].youTubeId,\n        }\n\n        let newsong = {\n            id: playlist.songs[store.currentSongIndex]._id,\n            title: document.getElementById(\"songtitle\").value,\n            artist: document.getElementById(\"songartist\").value,\n            youTubeId: document.getElementById(\"youtubeid\").value,\n        }\n\n        let transaction = new EditSong_Transaction(store, store.currentSongIndex, originalsong, newsong);\n        tps.addTransaction(transaction);\n        store.checkUndoRedo();\n    }\n\n    store.editSong = function (index, title, artist, youtubeid) {\n        const playlist = store.currentList\n        playlist.songs[index].title = title\n        playlist.songs[index].artist = artist\n        playlist.songs[index].youTubeId = youtubeid\n\n        console.log(\"playlist\", playlist.songs[store.currentSongIndex])\n\n        async function asyncEditSong() {\n            let response = await api.updatePlaylistById(store.currentList._id, playlist)\n            if (response.data.success) {\n                storeReducer({\n                    type: GlobalStoreActionType.SET_CURRENT_LIST,\n                    payload: store.currentList\n                })\n                store.hideEditSongModal();\n            }\n        }\n        asyncEditSong()\n    }\n\n    store.showEditSongModal = function (index) {\n        let title = store.currentList.songs[index].title\n        let artist = store.currentList.songs[index].artist\n        let youTubeId = store.currentList.songs[index].youTubeId\n\n        let song = {\n            index: index,\n            title: title,\n            artist: artist,\n        }\n        storeReducer({\n            type: GlobalStoreActionType.SET_EDIT_SONG_ACTIVE,\n            payload: song\n        });\n\n        document.getElementById(\"songtitle\").value = title;\n        document.getElementById(\"songartist\").value = artist;\n        document.getElementById(\"youtubeid\").value = youTubeId;\n        document.getElementById(\"edit-song-modal\").classList.add(\"is-visible\");\n        store.disableEditToolBarButtons();\n    }\n\n    store.hideEditSongModal = function () {\n        document.getElementById(\"edit-song-modal\").classList.remove(\"is-visible\");\n        store.checkUndoRedo();\n    }\n\n    store.getPlaylistSize = function() {\n        return store.currentList.songs.length;\n    }\n    store.undo = () => {\n        if (tps.hasTransactionToUndo()) {\n            tps.undoTransaction();\n        }\n        store.checkUndoRedo();\n    }\n    // THIS FUNCTION BEGINS THE PROCESS OF PERFORMING A REDO\n    store.redo = () => {\n        if (tps.hasTransactionToRedo()) {\n            tps.doTransaction();\n        }\n        store.checkUndoRedo();\n    }\n    useEffect(() => {\n        document.addEventListener('keydown', store)\n        return () => {\n            document.removeEventListener('keydown', store)\n        };\n    }, [store]);\n\n    store.checkUndoRedo = function () {\n        document.getElementById(\"add-song-button\").disabled = false;\n        document.getElementById(\"close-button\").disabled = false;\n\n        let undoButton = document.getElementById(\"undo-button\");\n        let redoButton = document.getElementById(\"redo-button\");\n\n        if (tps.getUndoSize() === 0) {\n            undoButton.disabled = true;\n        }\n        else {\n            undoButton.disabled = false;\n        }\n        \n        if (tps.getRedoSize() === 0) {\n            redoButton.disabled = true\n        }\n        else {\n            redoButton.disabled = false;\n        }\n    }\n\n    store.disableEditToolBarButtons = function () {\n        document.getElementById(\"undo-button\").disabled = true;\n        document.getElementById(\"redo-button\").disabled = true;\n        document.getElementById(\"close-button\").disabled = true;\n        document.getElementById(\"add-song-button\").disabled = true;\n    }\n\n    // THIS FUNCTION ENABLES THE PROCESS OF EDITING A LIST NAME\n    store.setIsListNameEditActive = function () {\n        storeReducer({\n            type: GlobalStoreActionType.SET_LIST_NAME_EDIT_ACTIVE,\n            payload: null\n        });\n        store.disableEditToolBarButtons();\n    }\n\n    // THIS GIVES OUR STORE AND ITS REDUCER TO ANY COMPONENT THAT NEEDS IT\n    return { store, storeReducer };\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}