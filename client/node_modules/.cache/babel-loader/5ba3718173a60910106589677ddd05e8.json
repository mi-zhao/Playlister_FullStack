{"ast":null,"code":"/*\n    This is our http api, which we use to send requests to\n    our back-end API. Note we're using the Axios library\n    for doing this, which is an easy to use AJAX-based\n    library. We could (and maybe should) use Fetch, which\n    is a native (to browsers) standard, but Axios is easier\n    to use when sending JSON back and forth and it's a Promise-\n    based API which helps a lot with asynchronous communication.\n    \n    @author McKilla Gorilla\n*/\n// GENERATES HTTP REQUESTS\nimport axios from 'axios';\nconst api = axios.create({\n  baseURL: 'http://localhost:4000/api'\n}); // THESE ARE ALL THE REQUESTS WE'LL BE MAKING, ALL REQUESTS HAVE A\n// REQUEST METHOD (like get) AND PATH (like /playlist). SOME ALSO\n// REQUIRE AN id SO THAT THE SERVER KNOWS ON WHICH LIST TO DO ITS\n// WORK, AND SOME REQUIRE DATA, WHICH WE CALL THE payload, FOR WHEN\n// WE NEED TO PUT THINGS INTO THE DATABASE OR IF WE HAVE SOME\n// CUSTOM FILTERS FOR QUERIES\n// export const deletePlaylistById = (id) => api.delete(`/playlist/${id}`)\n// export const getAllPlaylists = () => api.get(`/playlists`)\n// export const getPlaylistPairs = () => api.get('/playlistpairs')\n// export const getPlaylistById = (id) => api.get(`/playlist/${id}`)                           // GET request: gets a resource\n// export const createPlaylist = (playlist) => api.post(`/playlist/`, playlist)                // POST request: creates a resource\n// export const updatePlaylistById = (id, playlist) => api.put(`/playlist/${id}`, playlist)    // PUT request: creates or replaces a resource\n\nexport const createPlaylist = payload => api.post(`/playlist`, payload);\nexport const getAllPlaylists = () => api.get(`/playlists`);\nexport const getPlaylistPairs = () => api.get('playlistpairs');\nexport const updatePlaylistById = (id, payload) => api.put(`/playlist/${id}`, payload);\nexport const deletePlaylistById = id => api.delete(`/playlist/${id}`);\nexport const getPlaylistById = id => api.get(`/playlist/${id}`);\nconst apis = {\n  getAllPlaylists,\n  getPlaylistPairs,\n  getPlaylistById,\n  createPlaylist,\n  updatePlaylistById,\n  deletePlaylistById\n};\nexport default apis;","map":{"version":3,"names":["axios","api","create","baseURL","createPlaylist","payload","post","getAllPlaylists","get","getPlaylistPairs","updatePlaylistById","id","put","deletePlaylistById","delete","getPlaylistById","apis"],"sources":["/Users/michelle/Projects/Playlister_HW3/client/src/api/index.js"],"sourcesContent":["/*\n    This is our http api, which we use to send requests to\n    our back-end API. Note we're using the Axios library\n    for doing this, which is an easy to use AJAX-based\n    library. We could (and maybe should) use Fetch, which\n    is a native (to browsers) standard, but Axios is easier\n    to use when sending JSON back and forth and it's a Promise-\n    based API which helps a lot with asynchronous communication.\n    \n    @author McKilla Gorilla\n*/\n\n// GENERATES HTTP REQUESTS\nimport axios from 'axios'\nconst api = axios.create({\n    baseURL: 'http://localhost:4000/api',\n})\n\n// THESE ARE ALL THE REQUESTS WE'LL BE MAKING, ALL REQUESTS HAVE A\n// REQUEST METHOD (like get) AND PATH (like /playlist). SOME ALSO\n// REQUIRE AN id SO THAT THE SERVER KNOWS ON WHICH LIST TO DO ITS\n// WORK, AND SOME REQUIRE DATA, WHICH WE CALL THE payload, FOR WHEN\n// WE NEED TO PUT THINGS INTO THE DATABASE OR IF WE HAVE SOME\n// CUSTOM FILTERS FOR QUERIES\n\n// export const deletePlaylistById = (id) => api.delete(`/playlist/${id}`)\n// export const getAllPlaylists = () => api.get(`/playlists`)\n// export const getPlaylistPairs = () => api.get('/playlistpairs')\n// export const getPlaylistById = (id) => api.get(`/playlist/${id}`)                           // GET request: gets a resource\n// export const createPlaylist = (playlist) => api.post(`/playlist/`, playlist)                // POST request: creates a resource\n// export const updatePlaylistById = (id, playlist) => api.put(`/playlist/${id}`, playlist)    // PUT request: creates or replaces a resource\n\nexport const createPlaylist = (payload) => api.post(`/playlist`, payload)\nexport const getAllPlaylists = () => api.get(`/playlists`)\nexport const getPlaylistPairs = () => api.get('playlistpairs')\nexport const updatePlaylistById = (id, payload) => api.put(`/playlist/${id}`, payload)\nexport const deletePlaylistById = (id) => api.delete(`/playlist/${id}`)\nexport const getPlaylistById = (id) => api.get(`/playlist/${id}`)\n\nconst apis = {\n    getAllPlaylists,\n    getPlaylistPairs,\n    getPlaylistById,\n    createPlaylist,\n    updatePlaylistById,\n    deletePlaylistById,\n}\n\nexport default apis\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,MAAMC,GAAG,GAAGD,KAAK,CAACE,MAAN,CAAa;EACrBC,OAAO,EAAE;AADY,CAAb,CAAZ,C,CAIA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAO,MAAMC,cAAc,GAAIC,OAAD,IAAaJ,GAAG,CAACK,IAAJ,CAAU,WAAV,EAAsBD,OAAtB,CAApC;AACP,OAAO,MAAME,eAAe,GAAG,MAAMN,GAAG,CAACO,GAAJ,CAAS,YAAT,CAA9B;AACP,OAAO,MAAMC,gBAAgB,GAAG,MAAMR,GAAG,CAACO,GAAJ,CAAQ,eAAR,CAA/B;AACP,OAAO,MAAME,kBAAkB,GAAG,CAACC,EAAD,EAAKN,OAAL,KAAiBJ,GAAG,CAACW,GAAJ,CAAS,aAAYD,EAAG,EAAxB,EAA2BN,OAA3B,CAA5C;AACP,OAAO,MAAMQ,kBAAkB,GAAIF,EAAD,IAAQV,GAAG,CAACa,MAAJ,CAAY,aAAYH,EAAG,EAA3B,CAAnC;AACP,OAAO,MAAMI,eAAe,GAAIJ,EAAD,IAAQV,GAAG,CAACO,GAAJ,CAAS,aAAYG,EAAG,EAAxB,CAAhC;AAEP,MAAMK,IAAI,GAAG;EACTT,eADS;EAETE,gBAFS;EAGTM,eAHS;EAITX,cAJS;EAKTM,kBALS;EAMTG;AANS,CAAb;AASA,eAAeG,IAAf"},"metadata":{},"sourceType":"module"}